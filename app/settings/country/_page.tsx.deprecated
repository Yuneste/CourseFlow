'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { ChevronLeft, Globe } from 'lucide-react'
import Link from 'next/link'
import { createClient } from '@/lib/supabase/client'

const COUNTRIES = {
  US: { name: 'United States', flag: 'ðŸ‡ºðŸ‡¸', system: 'Semester system' },
  CA: { name: 'Canada', flag: 'ðŸ‡¨ðŸ‡¦', system: 'Semester system' },
  UK: { name: 'United Kingdom', flag: 'ðŸ‡¬ðŸ‡§', system: 'Term system' },
  DE: { name: 'Germany', flag: 'ðŸ‡©ðŸ‡ª', system: 'Semester system' },
  NL: { name: 'Netherlands', flag: 'ðŸ‡³ðŸ‡±', system: 'Block/Period system' },
}

export default function CountrySettingsPage() {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState(false)
  const [currentCountry, setCurrentCountry] = useState<string | null>(null)

  useEffect(() => {
    loadProfile()
  }, [])

  const loadProfile = async () => {
    const supabase = createClient()
    const { data: { user } } = await supabase.auth.getUser()
    
    if (user) {
      const { data: profileData } = await supabase
        .from('profiles')
        .select('country')
        .eq('id', user.id)
        .single()
      
      if (profileData?.country) {
        setCurrentCountry(profileData.country)
      }
    }
  }

  const handleCountrySelect = async (country: string) => {
    setIsLoading(true)

    try {
      const response = await fetch('/api/profile', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ country }),
      })

      if (response.ok) {
        router.push('/dashboard')
      }
    } catch (error) {
      console.error('Error updating country:', error)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <>
      <div className="mb-8">
        <Link href="/settings">
          <Button variant="ghost" className="mb-4">
            <ChevronLeft className="h-4 w-4 mr-2" />
            Back to Settings
          </Button>
        </Link>
        <h1 className="text-3xl font-bold text-foreground">
          Country & Region
        </h1>
        <p className="text-muted-foreground mt-1">Select your country to customize your academic calendar</p>
      </div>

      <Card className="max-w-2xl">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Globe className="h-5 w-5 text-primary" />
            Select Your Country
          </CardTitle>
          <CardDescription>
            Your academic terms and calendar will be customized based on your selection
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-3">
            {Object.entries(COUNTRIES).map(([code, country]) => (
              <Button
                key={code}
                variant={currentCountry === code ? 'default' : 'outline'}
                className="justify-start h-auto py-4"
                onClick={() => handleCountrySelect(code)}
                disabled={isLoading}
              >
                <span className="text-2xl mr-3">{country.flag}</span>
                <div className="text-left">
                  <div className="font-medium">{country.name}</div>
                  <div className="text-sm opacity-80">{country.system}</div>
                </div>
              </Button>
            ))}
          </div>
        </CardContent>
      </Card>
    </>
  )
}